/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// include <dt-bindings/zmk/backlight.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

// include <dt-bindings/led/led.h>
/*           36 Keys
╭───────────────╮ ╭───────────────╮
│ 0  1  2  3  4 │ │ 5  6  7  8  9 │
│10 11 12 13 14 │ │15 16 17 18 19 │
│20 21 22 23 24 │ │25 26 27 28 29 │
╰────╮ 30 31 32 │ │33 34 35 ╭─────╯
     ╰──────────╯ ╰─────────╯         */

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
// &led_strip {
//    chain-length = <18>;
// };

&mt {
    tapping-term-ms = <500>;

    // retro-tap;
};

&lt { tapping-term-ms = <180>; };

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_mo4 {
            timeout-ms = <300>;
            key-positions = <33 34 35>;
            layers = <0 1 2 3 4>;
            bindings = <&mo 4>;
        };

        combo_lpar {
            timeout-ms = <100>;
            key-positions = <4 3>;
            bindings = <&kp LPAR>;
            layers = <0 1 2>;
        };

        combo_rpar {
            timeout-ms = <100>;
            key-positions = <6 5>;
            bindings = <&kp RPAR>;
            layers = <0 1 2 3>;
        };

        combo_lbkt {
            timeout-ms = <100>;
            key-positions = <13 14>;
            bindings = <&kp LBKT>;
            layers = <0 1 2 3>;
        };

        combo_rbkt {
            timeout-ms = <100>;
            key-positions = <15 16>;
            bindings = <&kp RBKT>;
            layers = <0 1 2>;
        };

        combo_lbrc {
            timeout-ms = <100>;
            key-positions = <23 24>;
            bindings = <&kp LBRC>;
            layers = <0 1 2 3>;
        };

        combo_rbrc {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&kp RBRC>;
            layers = <0 1 2 3>;
        };

        combo_hyper {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <0 2 1>;
            bindings = <&sk LG(LS(LA(LCTRL)))>;
        };

        combo_colon {
            timeout-ms = <30>;
            key-positions = <18 28>;
            layers = <0 1>;
            bindings = <&rev_colon>;
        };

        combo_slideover {
            timeout-ms = <30>;
            layers = <0>;
            key-positions = <0 10>;
            bindings = <&macro_slideover>;
        };

        combo_apos {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <16 26>;
            bindings = <&kp SINGLE_QUOTE>;
        };

        combo_dash {
            timeout-ms = <200>;
            key-positions = <3 13>;
            layers = <0 1 2 3>;
            bindings = <&kp MINUS>;
        };

        combo_undersc {
            timeout-ms = <200>;
            key-positions = <13 23>;
            layers = <0 1 2 3>;
            bindings = <&kp LS(MINUS)>;
        };

        combo_emdash {
            timeout-ms = <50>;
            layers = <0 1 2 3>;
            key-positions = <14 4>;
            bindings = <&kp LS(LA(MINUS))>;
        };

        combo_plus {
            timeout-ms = <50>;
            layers = <0 1 2 3>;
            key-positions = <14 24>;
            bindings = <&kp LS(EQUAL)>;
        };

        next_slideo {
            bindings = <&next_slideover>;
            key-positions = <10 20>;
        };

        combo_os {
            bindings = <&mo 5>;
            key-positions = <33 34>;
        };

        combo_tog1 {
            bindings = <&tog 1>;
            key-positions = <10 11 12>;
        };

        combo_l5_tog {
            bindings = <&tog 5>;
            key-positions = <17 18 19>;
        };

        bt_clr {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 22>;
            layers = <4>;
        };

        combo_l4_tog {
            bindings = <&tog 4>;
            key-positions = <27 28 29>;
        };

        combo_L6_tog {
            bindings = <&tog 6>;
            key-positions = <9 8 7>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <6 16>;
            timeout-ms = <75>;
        };

        combo_bspword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <17 7>;
            layers = <0 3>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <8 18>;
        };

        drafts_bullet {
            bindings = <&kp LC(B)>;
            key-positions = <12 22>;
            timeout-ms = <75>;
        };

        sticky_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <12 2>;
        };

        cmb_ent {
            bindings = <&tri_ent>;
            key-positions = <1 11>;
        };
    };

    behaviors {
        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

        macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_up: FN_up {
            compatible = "zmk,behavior-macro";
            label = "FN_UP";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_down: FN_down {
            compatible = "zmk,behavior-macro";
            label = "FN_DOWN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_left: FN_left {
            compatible = "zmk,behavior-macro";
            label = "FN_LEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_right: FN_right {
            compatible = "zmk,behavior-macro";
            label = "FN_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        dotdotdot: dotdotdot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
            label = "DOTDOTDOT";
        };

        next_slideover: next_slideover {
            compatible = "zmk,behavior-macro";
            label = "NEXT_SLIDEOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LCMD>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS &kp LCMD>;
        };

        macro_displaylocn: macro_displaylocn {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DISPLAYLOCN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LC(BACKSLASH)>,
                <&macro_release>;
        };

        macro_zz: macro_zz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp Z>;
            label = "MACRO_ZZ";
        };

        tri_the: tri_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "TRI_THE";
            tap-ms = <75>;
        };

        tri_and: tri_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "TRI_AND";
            tap-ms = <75>;
        };

        tri_ent: tri_ent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N &kp T>;
            label = "TRI_ENT";
            tap-ms = <75>;
        };

        bdel: backdelete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DEL";
            #binding-cells = <0>;
            bindings = <&kp LA(BSPC)>, <&kp LA(DEL)>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_z: holdtap_z {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <650>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <125>;
        };

        ht_shiftz: ht_shiftz {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFTZ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
        };

        bsp_word: bsp_word {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_WORD";
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        del_word: del_word {
            compatible = "zmk,behavior-mod-morph";
            label = "DEL_WORD";
            bindings = <&kp DELETE>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_layers: td_layers {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 6>;

            tapping-term-ms = <300>;
        };

        td_revcolon_ellip: td_revcolon_ellip {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_REVCOLON_ELLIP";
            #binding-cells = <0>;
            bindings = <&rev_colon>, <&kp LA(SEMI)>;

            tapping-term-ms = <250>;
        };

        td_semicomma: td_semicomma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMICOMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            tapping-term-ms = <250>;
        };

        rev_colon: rev_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "REV_COLON";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_shiftCW: td_shiftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTCW";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;
        };

        caret_cmdalt: caret_cmdalt {
            compatible = "zmk,behavior-hold-tap";
            label = "CARET_CMDALT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <13>;
            tapping-term-ms = <250>;
        };

        td_colondot: td_colondot {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COLONDOT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        td_trithe: td_trithe {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TRITHE";
            #binding-cells = <0>;
            bindings = <&kp H>, <&tri_the>;

            tapping-term-ms = <225>;
        };

        colndotell: colndotell {
            compatible = "zmk,behavior-mod-morph";
            label = "COLNDOTELL";
            bindings = <&td_colondot>, <&kp LA(SEMI)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_ARROW";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LEFT_ARROW)>;

            tapping-term-ms = <250>;
        };

        right_arr: right_arr {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_ARR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LG(RIGHT)>;

            tapping-term-ms = <250>;
        };

        left_taphold: left_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_TAPHOLD";
            bindings = <&kp>, <&left_arrow>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        rght_taphold: rght_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "RGHT_TAPHOLD";
            bindings = <&kp>, <&right_arr>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        td_triand: td_triand {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TRIAND";
            #binding-cells = <0>;
            bindings = <&kp A>, <&tri_and>;

            tapping-term-ms = <220>;
        };

        holdtap_td_triand: holdtap_td_triand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_TD_TRIAND";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&td_triand>;

            quick-tap-ms = <125>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "0 (base)";
            bindings = <
&kp Q                    &kp W       &kp E       &kp R         &kp T            &kp Y        &kp U  &kp I          &kp O    &kp P
&ht_hl 1 A               &ht_hl 6 S  &ht_hl 2 D  &hm LGUI F    &kp G            &kp H        &kp J  &ht_hl 2 K     &kp L    &ht_hl 5 FSLH
&ht_shiftz LEFT_SHIFT Z  &kp X       &kp C       &kp V         &kp B            &kp N        &kp M  &td_semicomma  &kp DOT  &td_shiftCW
                                     &td_esc     &mt LGUI TAB  &mt LCTRL RET    &lt 3 SPACE  &mo 2  &kp CAPS
            >;
        };

        numbers {
            display-name = "1 (nums)";
            bindings = <
&none  &kp EXCL        &kp AT_SIGN     &kp LA(NUMBER_3)   &kp PLUS                  &kp SEMI    &kp NUMBER_1  &kp N2  &kp N3  &none
&none  &kp LEFT_SHIFT  &ht_hl 2 TILDE  &kp UNDER          &kp MINUS                 &kp COLON   &kp N4        &kp N5  &kp N6  &kp SLASH
&none  &kp GRAVE       &kp PIPE        &kp LA(LS(MINUS))  &kp EQUAL                 &kp PERIOD  &kp N7        &kp N8  &kp N9  &ht_shiftz RIGHT_SHIFT N0
                       &kp LEFT_ALT    &mt LGUI LS(TAB)   &mt LEFT_CONTROL ENTER    &trans      &trans        &tog 1
            >;

            label = "1 (numRH)";
        };

        nav_layer {
            display-name = "2 (nav)";
            bindings = <
&kp TILDE   &kp EXCL    &tri_ent   &kp LA(N3)      &tri_the    &none                 &macro_displaylocn        &macro_switch  &macro_windows             &kp PG_UP
&tri_and    &kp DOLLAR  &kp PRCNT  &kp LEFT_SHIFT  &none       &kp LA(LG(UP_ARROW))  &kp LA(LEFT)              &kp UP         &kp LA(RIGHT)              &kp PG_DN
&kp LSHIFT  &kp AMPS    &kp STAR   &none           &none       &kp LG(LA(DOWN))      &left_taphold LA(LEFT) 0  &kp DOWN       &rght_taphold LA(RIGHT) 0  &sk RSHFT
                        &trans     &trans          &trans      &trans                &trans                    &kp C_EJECT
            >;
        };

        numbers_LH {
            display-name = "3 (num)";
            bindings = <
&kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LA(EQUAL)    &kp GRAVE                 &kp PIPE    &kp DOUBLE_QUOTES  &kp TILDE    &kp ESC
&kp PLUS   &kp N4        &ht_hl 2 N5   &kp N6        &kp SLASH        &kp LA(BACKSPACE)         &rev_colon  &bsp_word          &del_word    &kp BSLH
&kp EQUAL  &kp N7        &kp N8        &kp N9        &kp N0           &sk RS(RA(RC(LEFT_GUI)))  &kp APOS    &kp COMMA          &colndotell  &kp RSHFT
                         &trans        &trans        &trans           &trans                    &trans      &caps_word
            >;

            label = "3 (numLH)";
        };

        board {
            display-name = "4 (board)";
            bindings = <
&bt BT0        &bt BT1        &bt BT2        &bt BT3        &bt BT4          &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&out OUT_TOG   &none          &none          &bt BT_PRV     &bt BT_NXT       &kp F11  &kp F12  &none   &none   &none
                              &none          &none          &none            &trans   &trans   &trans
            >;
        };

        media {
            display-name = "5 (media)";
            bindings = <
&kp LG(LS(NUMBER_3))  &none  &none  &none  &none               &none     &kp C_RW       &kp C_VOL_UP  &kp C_FF  &none
&none                 &none  &none  &none  &none               &none     &kp C_BRI_INC  &kp C_VOL_DN  &none     &none
&kp LEFT_ALT          &none  &none  &none  &none               &none     &kp C_BRI_DEC  &none         &none     &none
                             &none  &none  &kp LEFT_CONTROL    &kp C_PP  &trans         &trans
            >;
        };

        app {
            display-name = "6 (app)";
            bindings = <
&none  &none  &macro_switch  &macro_windows  &macro_displaylocn    &none   &none                 &none                 &none                  &none
&none  &none  &FN_up         &FN_left        &FN_right             &none   &kp LG(LEFT_BRACKET)  &kp LG(LA(UP_ARROW))  &kp LG(RIGHT_BRACKET)  &none
&none  &none  &FN_down       &none           &none                 &none   &kp LG(NUMBER_1)      &kp LA(LG(DOWN))      &kp LG(N0)             &kp RIGHT_SHIFT
              &kp LEFT_ALT   &kp LEFT_GUI    &kp LCTRL             &trans  &trans                &trans
            >;
        };
    };
};
