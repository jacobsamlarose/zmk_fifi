/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// include <dt-bindings/zmk/backlight.h>

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

// include <dt-bindings/led/led.h>
/*           36 Keys
╭───────────────╮ ╭───────────────╮
│ 0  1  2  3  4 │ │ 5  6  7  8  9 │
│10 11 12 13 14 │ │15 16 17 18 19 │
│20 21 22 23 24 │ │25 26 27 28 29 │
╰────╮ 30 31 32 │ │33 34 35 ╭─────╯
     ╰──────────╯ ╰─────────╯         */

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
// &led_strip {
//    chain-length = <18>;
// };

&mt {
    tapping-term-ms = <500>;

    // retro-tap;
};

&lt { tapping-term-ms = <180>; };

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_lpar {
            timeout-ms = <100>;
            key-positions = <4 3>;
            bindings = <&kp LPAR>;
            layers = <0 1>;
        };

        combo_rpar {
            timeout-ms = <100>;
            key-positions = <6 5>;
            bindings = <&kp RPAR>;
            layers = <0 1 2>;
        };

        combo_lbkt {
            timeout-ms = <100>;
            key-positions = <13 14>;
            bindings = <&kp LBKT>;
            layers = <0 1 2>;
        };

        combo_rbkt {
            timeout-ms = <100>;
            key-positions = <15 16>;
            bindings = <&kp RBKT>;
            layers = <0 1>;
        };

        combo_lbrc {
            timeout-ms = <100>;
            key-positions = <23 24 35>;
            bindings = <&kp LBRC>;
            layers = <0 1 2>;
        };

        combo_rbrc {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&kp RBRC>;
            layers = <0 1 2>;
        };

        combo_dash {
            timeout-ms = <200>;
            key-positions = <3 13>;
            layers = <0 2>;
            bindings = <&kp MINUS>;
        };

        combo_undersc {
            timeout-ms = <200>;
            key-positions = <13 23>;
            layers = <0 1 2>;
            bindings = <&kp LS(MINUS)>;
        };

        combo_emdash {
            timeout-ms = <50>;
            layers = <0 1 2>;
            key-positions = <14 4>;
            bindings = <&kp LS(LA(MINUS))>;
        };

        combo_plus {
            timeout-ms = <50>;
            layers = <0 1 2>;
            key-positions = <14 24>;
            bindings = <&kp LS(EQUAL)>;
        };

        bt_clr {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 22>;
            layers = <3>;
        };

        drafts_bullet {
            bindings = <&kp LC(B)>;
            key-positions = <12 22>;
            timeout-ms = <200>;
            layers = <0>;
        };

        mo_L6 {
            bindings = <&mo 6>;
            key-positions = <1 2 3>;
        };

        cmb_switch {
            bindings = <&macro_switch>;
            key-positions = <15 25>;
            layers = <0 1 2>;
        };

        cmb_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <11 1>;
            layers = <0>;
            timeout-ms = <200>;
        };

        cmb_l5 {
            bindings = <&mo 5>;
            key-positions = <12 13>;
            timeout-ms = <200>;
            layers = <0 1 2>;
        };

        bsp_word {
            bindings = <&bsp_word>;
            key-positions = <6 16>;
            timeout-ms = <200>;
            layers = <0>;
        };

        cmb_colon {
            bindings = <&kp COLON>;
            key-positions = <16 26>;
            timeout-ms = <200>;
            layers = <0>;
        };

        cmb_que {
            bindings = <&kp QUESTION>;
            key-positions = <27 17>;
            timeout-ms = <200>;
            layers = <0>;
        };

        bsp_del {
            bindings = <&bspc_del>;
            key-positions = <7 17>;
            timeout-ms = <200>;
            layers = <0>;
        };

        cmb_stickyshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <2 12>;
            layers = <0 1 2>;
        };

        combo_dqt {
            bindings = <&kp DQT>;
            key-positions = <19 29>;
            layers = <0>;
            timeout-ms = <200>;
        };

        combo_a {
            bindings = <&kp LS(A)>;
            key-positions = <10 20>;
            layers = <0>;
            timeout-ms = <200>;
        };

        cmb_pp {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <7 17>;
            timeout-ms = <200>;
            layers = <4>;
        };

        cmb_navtog {
            bindings = <&tog 2>;
            key-positions = <28 27 26>;
            timeout-ms = <200>;
            layers = <0 2>;
        };

        cmb_slash {
            bindings = <&mod_slash>;
            key-positions = <16 17>;
            timeout-ms = <150>;
            layers = <0>;
        };

        cmb_altdash {
            bindings = <&kp LA(MINUS)>;
            key-positions = <3 13>;
            timeout-ms = <200>;
            layers = <1>;
        };

        cmb_cmdarrr {
            bindings = <&kp RG(RIGHT)>;
            key-positions = <18 8>;
            timeout-ms = <200>;
            layers = <2>;
        };

        cmb_cmdarrl {
            bindings = <&kp RG(LEFT)>;
            key-positions = <16 6>;
            timeout-ms = <200>;
            layers = <2>;
        };

        cmb_bspLine {
            bindings = <&kp RG(BACKSPACE)>;
            key-positions = <15 5>;
            layers = <0>;
        };

        cmb_shiftlock {
            bindings = <&hold_shift>;
            key-positions = <17 27>;
            layers = <2>;
        };

        cmb_moveline {
            bindings = <&smart_moveline>;
            key-positions = <17 7>;
            timeout-ms = <200>;
            layers = <2 5>;
        };

        cmb_altarrl {
            bindings = <&kp LA(LEFT)>;
            key-positions = <16 26>;
            layers = <2>;
            timeout-ms = <200>;
        };

        cmb_altarrr {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <18 28>;
            timeout-ms = <200>;
            layers = <2>;
        };

        cmb_arrstart {
            bindings = <&ArrowSelect RG(RS(LEFT)) RG(LEFT)>;
            key-positions = <27 26>;
            timeout-ms = <150>;
            layers = <0 2>;
        };

        cmb_arrend {
            bindings = <&ArrowSelect RG(RS(RIGHT)) RG(RIGHT)>;
            key-positions = <27 28>;
            timeout-ms = <150>;
            layers = <0 2>;
        };

        cmb_apos {
            bindings = <&kp APOS>;
            key-positions = <17 18>;
            timeout-ms = <150>;
            layers = <0>;
        };
    };

    behaviors {
        hold_shift: hold_shift {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&none>;

            ignored-key-positions = <16 17 18 26 27 28>;
        };

        smart_moveline: smart_moveline {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RG(RALT)>, <&none>;

            ignored-key-positions = <7 17 27>;
        };

        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

        macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_up: FN_up {
            compatible = "zmk,behavior-macro";
            label = "FN_UP";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_down: FN_down {
            compatible = "zmk,behavior-macro";
            label = "FN_DOWN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_left: FN_left {
            compatible = "zmk,behavior-macro";
            label = "FN_LEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_right: FN_right {
            compatible = "zmk,behavior-macro";
            label = "FN_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        next_slideover: next_slideover {
            compatible = "zmk,behavior-macro";
            label = "NEXT_SLIDEOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LCMD>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS &kp LCMD>;
        };

        macro_displaylocn: macro_displaylocn {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DISPLAYLOCN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LC(BACKSLASH)>,
                <&macro_release>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <125>;
        };

        ht_shift: ht_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "tap-preferred";
        };

        bsp_word: bsp_word {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_WORD";
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_semic: td_semic {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMIC";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            tapping-term-ms = <250>;
        };

        td_shiftCW: td_shiftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTCW";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_ARROW";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LEFT_ARROW)>;

            tapping-term-ms = <225>;
        };

        right_arr: right_arr {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_ARR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LG(RIGHT)>;

            tapping-term-ms = <225>;
        };

        left_taphold: left_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_TAPHOLD";
            bindings = <&kp>, <&left_arrow>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        rght_taphold: rght_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "RGHT_TAPHOLD";
            bindings = <&kp>, <&right_arr>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        ht_hyper: ht_hyper {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HYPER";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <125>;
            bindings = <&sk>, <&kp>;
        };

        mod_slash: mod_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_SLASH";
            bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pht_L2shift: pht_L2shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_L2SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <30 31 32 5 15 25 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        ArrowSelect: ArrowSelect {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWSELECT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "tap-preferred";
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            display-name = "0DFL";
            bindings = <
&kp Q               &kp W  &kp E       &kp R           &kp T            &kp Y        &kp U                              &kp I       &kp O    &kp P
&ht_hl 1 A          &kp S  &ht_hl 2 D  &hm LEFT_GUI F  &kp G            &kp H        &ht_hyper LS(LA(LC(RIGHT_GUI))) J  &ht_hl 5 K  &kp L    &ht_hl 4 APOS
&ht_shift LSHIFT Z  &kp X  &kp C       &kp V           &ht_hl 3 B       &kp N        &kp M                              &td_semic   &kp DOT  &td_shiftCW
                           &td_esc     &mt LGUI TAB    &mt LCTRL RET    &lt 2 SPACE  &none                              &kp CAPS
            >;

            label = "0DFL";
        };

        alt_nums {
            display-name = "1SYN";
            bindings = <
&none  &kp EXCL        &kp AT_SIGN     &kp LA(NUMBER_3)                      &none                     &kp SEMI    &kp NUMBER_1  &kp N2  &kp N3  &kp BACKSPACE
&none  &kp LEFT_SHIFT  &ht_hl 2 GRAVE  &ht_hyper LS(LA(LC(LEFT_GUI))) TILDE  &none                     &kp COLON   &kp N4        &kp N5  &kp N6  &kp BACKSLASH
&none  &none           &kp PIPE        &kp UNDER                             &none                     &kp PERIOD  &kp N7        &kp N8  &kp N9  &ht_shift RIGHT_SHIFT N0
                       &kp LEFT_ALT    &mt LGUI LS(TAB)                      &mt LEFT_CONTROL ENTER    &trans      &none         &none
            >;

            label = "1 SYN";
        };

        num_nav {
            display-name = "2NAV";
            bindings = <
&kp PLUS                    &kp NUMBER_1                &kp NUMBER_2  &kp NUMBER_3       &kp PERIOD    &bspc_del        &none                     &none        &none                      &kp ESC
&kp MINUS                   &pht_L2shift LEFT_SHIFT N4  &kp N5        &ht_hl 5 NUMBER_6  &kp COLON     &kt RIGHT_SHIFT  &left_taphold RA(LEFT) 0  &kp UP       &rght_taphold RA(RIGHT) 0  &kp SLASH
&ht_shift LEFT_SHIFT EQUAL  &kp N7                      &kp N8        &kp N9             &kp N0        &sk RIGHT_GUI    &none                     &kp DOWN     &none                      &ht_shift RSHFT EQUAL
                                                        &trans        &trans             &trans        &mo 5            &trans                    &hold_shift
            >;

            label = "2 NAV";
        };

        bt_fn {
            display-name = "3BT";
            bindings = <
&bt BT0        &bt BT1        &bt BT2           &bt BT3            &bt BT4          &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2     &bt BT_DISC 3      &bt BT_DISC 4    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&out OUT_TOG   &none          &bt BT_PRV        &bt BT_NXT         &none            &kp F11  &kp F12  &none   &none   &bt BT_CLR
                              &ext_power EP_ON  &ext_power EP_OFF  &none            &trans   &trans   &trans
            >;

            label = "3 BT";
        };

        media {
            display-name = "4MED";
            bindings = <
&kp LG(LS(NUMBER_3))  &none  &none  &none  &none               &none     &kp C_RW       &kp C_VOL_UP  &kp C_FF  &none
&none                 &none  &none  &none  &none               &none     &kp C_BRI_INC  &kp C_VOL_DN  &none     &none
&kp LEFT_ALT          &none  &none  &none  &none               &none     &kp C_BRI_DEC  &none         &none     &none
                             &none  &none  &kp LEFT_CONTROL    &kp C_PP  &trans         &trans
            >;

            label = "4 Md";
        };

        OS_app {
            display-name = "5OS";
            bindings = <
&macro_slideover  &macro_windows  &macro_switch  &macro_windows  &none        &macro_displaylocn  &none                 &none             &none         &none
&next_slideover   &FN_left        &FN_up         &FN_right       &none        &macro_windows      &kp LG(N1)            &kp LG(LA(UP))    &kp LG(N0)    &none
&none             &FN_left        &FN_down       &FN_right       &none        &macro_switch       &kp LG(LEFT_BRACKET)  &kp RG(RA(DOWN))  &kp RG(RBKT)  &kp RIGHT_SHIFT
                                  &kp LEFT_ALT   &kp LEFT_GUI    &kp LCTRL    &kp C_EJECT         &trans                &trans
            >;

            label = "5 OS";
        };

        Toggle {
            display-name = "6TOG";
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &tog 1  &tog 2  &tog 3  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &tog 4  &tog 5  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "6 TG";
        };
    };
};
