/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
// include <dt-bindings/led/led.h>

/*           36 Keys (Note: for the Fifi, I just ignore the outer columns)
╭─────────────────╮ ╭─────────────────╮
│ 0  1  2  3  4  5│ │ 6  7  8  9 10 11│
│12 13 14 15 16 17│ │18 19 20 21 22 23│
│24 25 26 27 28 29│ │30 31 32 33 34 35│
╰────────╮36 37 38│ │39 40 41 ╭───────╯
         ╰────────╯ ╰─────────╯         */

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4
// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

// &led_strip {
//    chain-length = <18>;
// };

&mt {
    tapping-term-ms = <500>;
    // retro-tap;
};

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>;
};

/ {

    combos {
        compatible = "zmk,combos";

	combo_capz {
           timeout-ms = <200>;
           key-positions = <25 26>;
	   layers = <0>;
           bindings = <&kp LS(Z)>;
         };

	combo_lshft {
           timeout-ms = <200>;
           key-positions = <3 15>;
	   layers = <0 1 2>;
           bindings = <&sk LSHIFT>;
         };

	combo_capw {
           timeout-ms = <200>;
           key-positions = <6 18>;
	   layers = <0 1 2>;
           bindings = <&caps_word>;
         };

        combo_mo3 {
           timeout-ms = <300>;
           key-positions = <39 40 41>;
	   layers = <0 1 2 3 4>;
           bindings = <&mo 3>;
         };

	combo_lpar {
           timeout-ms = <100>;
           key-positions = <4 5>;
           bindings = <&kp LPAR>;
         };
		
	combo_rpar {
           timeout-ms = <100>;
           key-positions = <6 7>;
           bindings = <&kp RPAR>;
         };
		
	combo_lbkt {
           timeout-ms = <100>;
           key-positions = <16 17>;
           bindings = <&kp LBKT>;
         };
		
	combo_rbkt {
           timeout-ms = <100>;
           key-positions = <18 19>;
           bindings = <&kp RBKT>;
         };
		
	combo_lbrc {
           timeout-ms = <100>;
           key-positions = <28 29>;
           bindings = <&kp LBRC>;
         };
		
	combo_rbrc {
           timeout-ms = <100>;
           key-positions = <30 31>;
           bindings = <&kp RBRC>;
         };

	combo_hyper {
           timeout-ms = <50>;
           key-positions = <19 20>;
	   layers = <0 2>;
           bindings = <&sk LG(LS(LA(LCTRL)))>;
         };

	combo_semi {
	   timeout-ms = <30>;
	   key-positions = <7 19>;
	   layers = <0>;
	   bindings = <&kp SEMI>;
	 };

	combo_colon {
	   timeout-ms = <30>;
	   key-positions = <19 31>;
	   layers = <0>;
	   bindings = <&kp COLON>;
	 };


	combo_slideover {
	   timeout-ms = <30>;
	   layers = <0>;
	   key-positions = <2 14>;
	   bindings = <&macro_slideover>;
	 };

	combo_apos {
	   timeout-ms = <50>;
	   layers = <0>;
	   key-positions = <20 21>;
	   bindings = <&kp SQT>;
	 };

	combo_altapos {
	   timeout-ms = <50>;
	   layers = <0>;
	   key-positions = <20 32>;
	   bindings = <&kp SQT>;
	 };

	combo_dash {
           timeout-ms = <200>;
           key-positions = <4 16>;
	   layers = <0 1 2>;
           bindings = <&kp MINUS>;
         };

	combo_undersc {
           timeout-ms = <200>;
           key-positions = <16 28>;
	   layers = <0 1 2>;
           bindings = <&kp LS(MINUS)>;
         };

	combo_emdash {
	   timeout-ms = <50>;
	   layers = <0 1 2>;
	   key-positions = <5 17>;
	   bindings = <&kp LS(LA(MINUS))>;
	 };

	combo_plus {
	   timeout-ms = <50>;
	   layers = <0 1 2>;
	   key-positions = <17 29>;
	   bindings = <&kp LS(EQUAL)>;
	 };

	combo_fwd {
	   timeout-ms = <50>;
	   layers = <1>;
	   key-positions = <8 9>;
	   bindings = <&kp C_FF>;
	 };

	combo_rwd {
	   timeout-ms = <50>;
	   layers = <1>;
	   key-positions = <7 8>;
	   bindings = <&kp C_RW>;
	 };

	combo_play {
	   timeout-ms = <50>;
	   layers = <1>;
	   key-positions = <7 8 9>;
	   bindings = <&kp C_PP>;
	 };

     };
     
     behaviors {

	td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

	macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPS>
                , <&macro_tap &kp BSLH>
                , <&macro_release &kp CAPS>
                ;
        };

	macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPS>
                , <&macro_tap &kp DOWN>
                , <&macro_release &kp CAPS>
                ;
        };

	macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPS>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp CAPS>
                ;
        };

	bdel: backdelete {
            compatible = "zmk,behavior-mod-morph";
            label      = "BACK_DEL";
            #binding-cells = <0>;
            bindings = <&kp LA(BSPC)>, <&kp LA(DEL)>;
            mods     = <(MOD_LSFT | MOD_RSFT)>;
	};

	hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

	bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

	ht_z: holdtap_z {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP"; 
            #binding-cells = <2>;
            tapping-term-ms = <650>;
	    quick-tap-ms = <200>;
    	    require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

	ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY"; 
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
	    require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;
        };
	
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <
   &none   &kp Q    		&kp W    	&kp E       	&kp R      	&kp T          		&kp Y   	&kp U    	&kp I       	&kp O    	&kp P 		&none
   &none   &kp A    		&kp S    	&ht_hl 1 D     	&hm LGUI F      &kp G          		&kp H   	&kp J    	&kp K       	&kp L    	&kp FSLH  	&none
   &none   &ht_z LSHIFT Z    	&kp X    	&kp C       	&kp V      	&kp B          		&kp N   	&kp M    	&kp COMMA   	&kp DOT  	&sk RSHFT   	&none
                                		&td_esc	   	&mt LGUI TAB  	&mt LCTRL RET  		&lt 2 SPACE	&mo 1 		&kp CAPS 
                        >;
                };

		nav_layer {

                        bindings = <
   &none   &kp TILDE  		&kp EXCL	&kp AT   	&kp LA(N3)     	&kp LA(MINUS)		&none		&none		&none	        &none		&none   	&none    
   &none   &kp PIPE		&kp DLLR	&kp PRCNT  	&kp CARET   	&kp LA(EQUAL)		&none 		&kp HOME	&kp UP		&kp END		&none		&none       	
   &none   &hm LSHIFT GRAVE 	&kp AMPS  	&kp STAR	&kp CAPS	&kp DOT			&none		&kp LEFT    	&kp DOWN	&kp RIGHT	&sk RSHFT	&none
                                		&trans  	&trans		&trans			&trans   	&trans   	&kp C_EJECT
                        >;
                };

		num_layer {

			bindings = <
   &none   &kp GRAVE  		&kp N1  	&kp N2  	&kp N3    	&kp MINUS    		&none		&none		&bdel  		&none		&kp ESC   	&none    
   &none   &kp N0  		&kp N4		&kp N5		&kp N6  	&kp EQUAL  		&mo 5		&kp COLON	&bspc_del  	&kp SQT		&kp BSLH	&none       
   &none   &kp LSHFT 		&kp N7		&kp N8		&kp N9		&kp PIPE		&mo 4		&kp SEMI	&kp COMMA  	&kp DOT		&kp RSHFT	&none
                                		&trans  	&trans		&trans			&trans   	&trans  	&caps_word
                        >;
                };
		
		board_layer {
	
			bindings = <
   &none   &bt BT0		&bt BT1	    	&bt BT2  	&bt BT3		&bt BT4			&none 		&none		&none 		&none		&none		&none
   &none   &none  		&none		&none     	&bt BT_PRV	&bt BT_NXT		&kp F1 		&kp F2   	&kp F3		&kp F4		&kp F5		&none	 
   &none   &none  		&bt BT_CLR  	&none       	&out OUT_TOG	&none			&kp F6		&kp F7   	&kp F8  	&kp F9		&kp F10		&none	 
                        			&none	    	&none   	&ext_power EP_TOG  	&trans  	&trans  	&trans
                        >;
                };

		os_layer {

                        bindings = <
   &none   &none  		&none  		&bt BT_PRV   	&bt BT_NXT   	&macro_switch		&none		&none		&none		&none		&none		&none
   &none   &kp LG(LS(NUMBER_3)) &kp C_RW  	&kp C_PP	&kp C_FF	&macro_windows		&mo 5 		&kp C_VOL_UP   	&kp C_BRI_UP	&none		&none		&none	 
   &none   &none  		&none	  	&none		&none		&none			&mo 4		&kp C_VOL_DN   	&kp C_BRI_DN  	&none		&none		&none	 
                                		&none 		&none 		&none  			&trans  	&trans  	&trans
                        >;
                };

		fn_layer {

                        bindings = <
   &none   &kp F1  		&kp F2 		&kp F3   	&kp F4   	&kp F5			&none		&kp PG_UP	&none		&none		&none		&none
   &none   &kp F6 		&kp F7		&kp F8		&kp F9		&kp F10			&none 		&kp PG_DN   	&none		&none		&none		&none	 
   &none   &kp F11  		&kp F12   	&none	  	&none		&none			&none		&none   	&none  		&none		&none		&none	 
                                		&none 		&none 		&none  			&trans  	&trans  	&trans
                        >;
                };
		
        };
};
