/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// include <dt-bindings/zmk/backlight.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

// include <dt-bindings/led/led.h>
/*           36 Keys
╭───────────────╮ ╭───────────────╮
│ 0  1  2  3  4 │ │ 5  6  7  8  9 │
│10 11 12 13 14 │ │15 16 17 18 19 │
│20 21 22 23 24 │ │25 26 27 28 29 │
╰────╮ 30 31 32 │ │33 34 35 ╭─────╯
     ╰──────────╯ ╰─────────╯         */

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
// &led_strip {
//    chain-length = <18>;
// };

&mt {
    tapping-term-ms = <500>;

    // retro-tap;
};

&lt {
    tapping-term-ms = <180>;
};

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_capw {
            timeout-ms = <200>;
            key-positions = <5 15>;
            layers = <0 1 2>;
            bindings = <&caps_word>;
        };

        combo_mo3 {
            timeout-ms = <300>;
            key-positions = <33 34 35>;
            layers = <0 1 2 3 4>;
            bindings = <&mo 3>;
        };

        combo_lpar {
            timeout-ms = <100>;
            key-positions = <4 3>;
            bindings = <&kp LPAR>;
            layers = <0 1 2>;
        };

        combo_rpar {
            timeout-ms = <100>;
            key-positions = <6 5>;
            bindings = <&kp RPAR>;
            layers = <0 1 2>;
        };

        combo_lbkt {
            timeout-ms = <100>;
            key-positions = <13 14>;
            bindings = <&kp LBKT>;
            layers = <0 1 2>;
        };

        combo_rbkt {
            timeout-ms = <100>;
            key-positions = <15 16>;
            bindings = <&kp RBKT>;
            layers = <0 1 2>;
        };

        combo_lbrc {
            timeout-ms = <100>;
            key-positions = <23 24>;
            bindings = <&kp LBRC>;
            layers = <0 1 2>;
        };

        combo_rbrc {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&kp RBRC>;
            layers = <0 1 2>;
        };

        combo_hyper {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <0 2>;
            bindings = <&sk LG(LS(LA(LCTRL)))>;
        };

        combo_semi {
            timeout-ms = <30>;
            key-positions = <17 27>;
            layers = <0>;
            bindings = <&kp SEMI>;
        };

        combo_colon {
            timeout-ms = <30>;
            key-positions = <18 28>;
            layers = <0>;
            bindings = <&kp COLON>;
        };

        combo_slideover {
            timeout-ms = <30>;
            layers = <0>;
            key-positions = <1 11>;
            bindings = <&macro_slideover>;
        };

        combo_apos {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <17 18>;
            bindings = <&kp SQT>;
        };

        combo_dash {
            timeout-ms = <200>;
            key-positions = <3 13>;
            layers = <0 1 2>;
            bindings = <&kp MINUS>;
        };

        combo_undersc {
            timeout-ms = <200>;
            key-positions = <13 23>;
            layers = <0 1 2>;
            bindings = <&kp LS(MINUS)>;
        };

        combo_emdash {
            timeout-ms = <50>;
            layers = <0 1 2>;
            key-positions = <14 4>;
            bindings = <&kp LS(LA(MINUS))>;
        };

        combo_plus {
            timeout-ms = <50>;
            layers = <0 1 2>;
            key-positions = <14 24>;
            bindings = <&kp LS(EQUAL)>;
        };

        L6_shifted {
            bindings = <&mo 6>;
            key-positions = <10 11>;
            timeout-ms = <50>;
        };

        Left {
            bindings = <&kp LEFT>;
            key-positions = <16 17>;
            layers = <6>;
        };

        Right {
            bindings = <&kp RIGHT>;
            key-positions = <17 18>;
            layers = <6>;
        };

        Up {
            bindings = <&kp UP>;
            key-positions = <17 7>;
            layers = <6>;
        };

        Down {
            bindings = <&kp DOWN>;
            key-positions = <17 27>;
            layers = <6>;
        };

        next_slideo {
            bindings = <&next_slideover>;
            key-positions = <11 21>;
        };
    };

    behaviors {
        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

        macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_up: FN_up {
            compatible = "zmk,behavior-macro";
            label = "FN_UP";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_down: FN_down {
            compatible = "zmk,behavior-macro";
            label = "FN_DOWN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_left: FN_left {
            compatible = "zmk,behavior-macro";
            label = "FN_LEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_right: FN_right {
            compatible = "zmk,behavior-macro";
            label = "FN_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        dotdotdot: dotdotdot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
            label = "DOTDOTDOT";
        };

        next_slideover: next_slideover {
            compatible = "zmk,behavior-macro";
            label = "NEXT_SLIDEOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LCMD>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS &kp LCMD>;
        };

        bdel: backdelete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DEL";
            #binding-cells = <0>;
            bindings = <&kp LA(BSPC)>, <&kp LA(DEL)>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_z: holdtap_z {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <650>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;
        };

        ht_shiftz: ht_shiftz {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFTZ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "tap-preferred";
        };

        bsp_word: bsp_word {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_WORD";
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        del_word: del_word {
            compatible = "zmk,behavior-mod-morph";
            label = "DEL_WORD";
            bindings = <&kp DELETE>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_numshift: td_numshift {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NUMSHIFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&tog 6>;
        };

        td_layers: td_layers {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LAYERS";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 6>;

            tapping-term-ms = <300>;
        };

        td_colondot: td_colondot {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COLONDOT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>, <&dotdotdot>;
        };

        td_semicomma: td_semicomma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMICOMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                    &kp W  &kp E       &kp R         &kp T            &kp Y        &kp U       &kp I          &kp O         &kp P
&ht_hl 6 A               &kp S  &ht_hl 1 D  &hm LGUI F    &kp G            &kp H        &kp J       &kp K          &kp L         &kp FSLH
&ht_shiftz LEFT_SHIFT Z  &kp X  &kp C       &kp V         &kp B            &kp N        &kp M       &td_semicomma  &td_colondot  &sk RSHFT
                                &td_esc     &mt LGUI TAB  &mt LCTRL RET    &lt 2 SPACE  &td_layers  &kp CAPS
            >;
        };

        nav_layer {
            bindings = <
&kp TILDE         &kp EXCL  &kp AT     &kp LA(N3)  &kp LA(MINUS)    &none   &kp HOME  &none        &kp PAGE_UP    &none
&kp PIPE          &kp DLLR  &kp PRCNT  &kp CARET   &kp LA(EQUAL)    &none   &kp END   &kp UP       &kp PAGE_DOWN  &none
&hm LSHIFT GRAVE  &kp AMPS  &kp STAR   &kp CAPS    &kp DOT          &none   &kp LEFT  &kp DOWN     &kp RIGHT      &sk RSHFT
                            &trans     &trans      &trans           &trans  &trans    &kp C_EJECT
            >;
        };

        num_layer {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS     &kp PIPE  &kp C_REWIND  &kp C_PLAY_PAUSE  &kp C_FF   &kp ESC
&kp N0     &kp N4        &kp N5        &kp N6        &kp MINUS    &mo 5     &kp COLON     &bsp_word         &del_word  &kp BSLH
&kp LSHFT  &kp N7        &kp N8        &kp N9        &kp EQUAL    &mo 4     &kp SEMI      &kp COMMA         &kp DOT    &kp RSHFT
                         &trans        &trans        &trans       &trans    &trans        &caps_word
            >;
        };

        board_layer {
            bindings = <
&bt BT0  &bt BT1  &bt BT2  &bt BT3     &bt BT4       &bt BT_CLR  &out OUT_TOG  &ext_power EP_TOG  &none  &none
&none    &none    &none    &bt BT_PRV  &bt BT_NXT    &none       &none         &none              &none  &none
&none    &none    &none    &none       &none         &none       &none         &none              &none  &none
                  &none    &none       &none         &trans      &trans        &trans
            >;
        };

        os_layer {
            bindings = <
&kp LG(LS(NUMBER_3))  &none     &FN_up        &none      &macro_switch       &none   &none         &none         &none  &none
&none                 &FN_left  &kp LEFT_ALT  &FN_right  &macro_windows      &mo 5   &kp C_VOL_UP  &kp C_BRI_UP  &none  &none
&none                 &none     &FN_down      &none      &next_slideover     &mo 4   &kp C_VOL_DN  &kp C_BRI_DN  &none  &none
                                &none         &none      &kp LEFT_CONTROL    &trans  &trans        &trans
            >;
        };

        fn_layer {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &none   &kp PG_UP  &none   &none  &none
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &none   &kp PG_DN  &none   &none  &none
&kp F11  &kp F12  &none   &none   &none      &none   &none      &none   &none  &none
                  &none   &none   &none      &trans  &trans     &trans
            >;
        };

        alt_num_layer {
            bindings = <
&bsp_word  &kp EXCL        &kp AT_SIGN   &kp LA(NUMBER_3)   &kp PLUS                  &kp SEMI    &kp NUMBER_1  &kp N2     &kp N3  &del_word
&mo 6      &kp LEFT_SHIFT  &kp TILDE     &kp UNDER          &kp MINUS                 &kp COLON   &kp N4        &kp N5     &kp N6  &kp SLASH
&kp LS(Z)  &kp GRAVE       &kp PIPE      &kp LA(LS(MINUS))  &kp EQUAL                 &kp PERIOD  &kp N7        &kp N8     &kp N9  &ht_shiftz RIGHT_SHIFT N0
                           &kp LEFT_ALT  &mt LGUI TAB       &mt LEFT_CONTROL ENTER    &kp SPACE   &tog 6        &del_word
            >;
        };
    };
};
